/* eslint-disable @typescript-eslint/dot-notation */
import { Component, NgZone, OnInit } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { HTTP } from '@awesome-cordova-plugins/http/ngx';
import { Platform } from '@ionic/angular';
import { environment } from '../../environments/environment';
import { isStringOrNumber } from '../util';
@Component({
  selector: 'app-tab1',
  templateUrl: 'tab1.page.html',
  styleUrls: ['tab1.page.scss']
})
export class Tab1Page implements OnInit {
  isStringOrNumber = isStringOrNumber;
  apiHost = environment.apiEndpoint;
  isLoading = false;
  uploadForm: FormGroup;
  formData = new FormData();
  responseData?: any;
  errorResponse?: any;

  constructor(private http: HTTP, private platform: Platform, private zone: NgZone) {
    this.uploadForm = new FormGroup({
      email: new FormControl('email@email.com'),
      firstName: new FormControl('Hello'),
      lastName: new FormControl('World'),
      image: new FormControl<File|Blob|string|undefined>(undefined),
      jsonFile: new FormControl<File|Blob|string|undefined>(undefined)
    });
  }

  async ngOnInit(): Promise<void> {
    console.log('init', this.platform.is('cordova'),this.platform.is('capacitor'));
    this.formData = new FormData();
    // await this.callPost();
  }

  async onSubmit() {
      console.log('submit');
    this.formData.set('firstName', this.uploadForm.get('firstName')?.value);
    this.formData.set('lastName', this.uploadForm.get('lastName')?.value);
    this.formData.set('email', this.uploadForm.get('email')?.value);
    try {
      this.http.setCookie(environment.apiHost, `key=helloworld`);
      this.http.setDataSerializer('multipart');
      this.isLoading = true;
      console.log('sending POST to', `${environment.apiEndpoint}/upload`);
      const response = await this.http.post(`${environment.apiEndpoint}/upload`, this.formData, undefined);
      this.responseData = JSON.parse(response.data);
      console.log('response.data', this.responseData, 'response',response);
    } catch(e) {
      console.log('error', e);
      this.errorResponse = e;
    } finally {
      this.isLoading = false;
    }
  }

  async uploadChange(e: Event ) {
    const target = e.target as HTMLInputElement;
    const files = target.files as FileList;
    const file = files.item(0);
    console.log('uploadChange', e, file);
      try {
        // Here we build the JSON response then conver to Blob before setting it to FormData
        const jsonObject = this.uploadForm.getRawValue();
        console.log('starting json');
        const base64String = await this.toBase64(file);
        console.log('B64 img');
        jsonObject.image = base64String;
        const jsonBlob = this.buildJsonBlob(jsonObject);
        this.formData.set('jsonFile', jsonBlob);
        console.log('done json');

      } catch(error) {
        console.log('failed to convert to base64 string!', error);
      }
  }

  private buildJsonBlob(o: any): Blob {
    const jsonString = JSON.stringify(o);
    const blob = new Blob([jsonString], {type: 'application/json'});
    const url  = URL.createObjectURL(blob);
    console.log('buildJson', o, url);
    return blob;
  }

  private toBase64(file: File | Blob): Promise<string> {
    console.log('toBase64', file);
    return new Promise((resolve, reject) => {
    // Be sure to use the patched FileReader generated by the code below!
    // There appear to be serialization issues that cause silent errors at the moment.
    const reader = this.getFileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      console.log('reader resolved', reader.result);
      resolve(reader.result as string);
    };
    reader.onerror = (error) => {
      console.log('reader onerror', error);
      reject(error);
    };
});
  }

  // This is incredibly hacky, but it seems to work in my testing:
  private getFileReader(): FileReader {
    // Per https://github.com/silkimen/cordova-plugin-advanced-http/issues/295#issuecomment-665002029
    const originalReadAsArrayBufferMethod = FileReader.prototype.readAsArrayBuffer;
    FileReader.prototype.readAsArrayBuffer = function(args) {
      const originalFileReader = this['__zone_symbol__originalInstance'];
      if (originalFileReader) {
        originalFileReader.onloadend = () => {
          this.result = originalFileReader.result;
          this.onload();
        };
        originalFileReader.readAsArrayBuffer(args);
      } else {
        originalReadAsArrayBufferMethod(args);
      }
    };
    // From https://github.com/ionic-team/capacitor/issues/1564#issuecomment-538200971
    const fileReader = new FileReader();
    const zoneOriginalInstance = (fileReader as any)['__zone_symbol__originalInstance'];
    return  zoneOriginalInstance || fileReader;
  }
}
